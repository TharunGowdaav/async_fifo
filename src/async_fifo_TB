module async_fifo_TB;

  wire [31:0] dout;
  wire full;
  wire empty;
  reg [31:0] din;
  reg wen, wclk, wrst_n;
  reg ren, rclk, rrst_n;

  // Queue to push din
  reg [31:0] wdata_q[$], wdata;

  asynchronous_fifo as_fifo (wclk, wrst_n, rclk, rrst_n, wen, ren, din, dout, full, empty);

  always #10ns wclk = ~wclk;
  always #35ns rclk = ~rclk;
  
  initial begin
    wclk = 1'b0; wrst_n = 1'b0;
    wen = 1'b0;
    din = 0;
    
    repeat(10) @(posedge wclk);
    wrst_n = 1'b1;

    repeat(2) begin
      for (int i = 0; i < 300; i++) begin
        @(posedge wclk iff !full);
        wen = (i % 2 == 0) ? 1'b1 : 1'b0;
        if (wen) begin
          din = $urandom;
          wdata_q.push_back(din);
        end
      end
      #50;
    end
  end

  initial begin
    rclk = 1'b0; rrst_n = 1'b0;
    ren = 1'b0;

    repeat(20) @(posedge rclk);
    rrst_n = 1'b1;

    repeat(2) begin
      for (int i = 0; i < 300; i++) begin
        @(posedge rclk iff !empty);
        ren = (i % 2 == 0) ? 1'b1 : 1'b0;
        if (ren) begin
          wdata = wdata_q.pop_front();
          if (dout !== wdata) $error("Time = %0t: Comparison Failed: expected wr_data = %h, rd_data = %h", $time, wdata, dout);
          else $display("Time = %0t: Comparison Passed: wr_data = %h and rd_data = %h", $time, wdata, dout);
        end
      end
      #50;
    end

    $finish;
  end
  
  initial begin 
    $dumpfile("dump.vcd"); 
    $dumpvars;
  end

endmodule
